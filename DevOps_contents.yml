- Linux
    - vim:
        - H is used to move the cursor to left
        - L is used to move the cursor to right
        - J is used to move the cursor down
        - K is used to move the cursor up
        - gg is used to move the cursor to the first line of the document
        - /text is used to search the word from top to bottom in the document and n is for next forward search
        - ?text is used to search the word from bottom to top in the document ans N is for next backward search
        - set number is used to set the numbers to the lines
        - set nonumber is used to unset the numbers to the lines
    - file permissions:
        - d stands for directory
        - - stands for file
        - l stands for link
        - in linux we have 3 types of file permission levels u - user, g - group and o - others
        - in linux we have 3 types of file permissions r(4) - read, w(2) - write and x(1) - execute
    - Archiving:
        - tar:
            - tar command is used to combine multiple files in to a single file but this will not compress files like zip.
            - tar -cf etc_backup.tar etc #here -c is for creating tar file, and f is for files.
            - -tf is used to view the tar file contents
            - -tvf is used to view the files with full details including permissions, ownership and modified date.
            - -xf is used to extract the tar file to normal file
        - gzip:
            - gzip is used to compress files.
            - gunzip is used to uncompress files.
        - We can combine both tar and gzip to archive and compress using single command
        - tar -cvzf <file name to create> <file name> #here z is for zippng.
    - file manipulation:
        - awk:
            - awk command is used to print only required fields in text files.
            - awk '{command}' <file name> is the command to use awk.
            - awk {'print $1'} /etc/passwd, this command will print single field. generally the delimiter for awk is 'space', if there is no space in the line, the entire line will be considered as a single field.
            - we can change the field seperator by using -F option awk -F ':' '{print $1, $5}' etc/passwd 


- openssh:
    - OpenSSH is a Remote management tool, which is used to connect remote server.
    - OpenSSH is a suite of utilities, important ones are server and client components.
    - Bydefault openssh-client is installed in Ubuntu
    - known-hosts: 
        - If we connect to a server first time it will add the device fingerprint in ~/.ssh/known_hosts file.
        - Generally everytime while you are connecting to a server, openssh checks known_hosts file first, because known_hosts file holds all the servers public keys and the servers IP address.
        - By using this if any hacker assigns server IP to hacker PC, ssh warns us because there is no public key associated to the hacker pc in its known_hosts.
    - ssh-client:
        - By using config file we can create a template for connecting servers easily without mentioning server public key, username and IP address.
        - config file template:
            - Host ubuntu #we can mention the name whatever we want
            - User ubuntu
            - Hostname 54.90.110.83
            - Port 22
            - PreferredAuthentications publickey
            - IdentityFile C:\Users\Nageswar-Acer\.ssh\Ubuntu
    - keys:
        - public #this key will be used to store in user machines
        - private #this key should not share to anyone, generally it will store in server machine
    - sshd_config:
        - PasswordLessAuthentication #if we set this to no, we cannot connect to the server using password and that too ssh, always use this option after configuring keys
        - Port #we can change the ssh default port number using this option, while connecting we should use -p option
        - ssh_config #like sshd_config file, this file is for global configuration, this file will be overwrite if we use config file which is in .ssh directory
        - PermitRootLogin # if we don't want to login as root using ssh we can make this as No
        - ClientAliveInterval 120 # if we set this as 120 terminal always will run
        - ClientAliveCountMax 10

- DNS:
    - stands for domain name system or domain name service
    - it will organize by ICANN (Internet corporation for assigned names and numbers) which is not profitable organization
    - dns working:
        1. Browser cache (edge://net-internals)
        2. OS cache
        3. Router cache/ ISP cache
        4. Root servers (we have total 13 root servers are available in our world starting from a.root-servers.net)
        5. TLD server (top level domain servers .com, .net, .gov...etc)
        6. Name servers

- ansible:
    - inventory/hosts
    - ansible.cfg
        - defaults
        - privilege_escalations
    - gather_facts
    - variables:
        - vars
        - vars_files
        - vars_prompt
        - extra vars (using -e as adhoc commands)
        - group vars (in inventory)
        - magic variables:
            - inventory_hostname
            - play_hosts
            - hostvars
            - groups
            - group_names
    - modules:
        - command (default)
        - shell
        - file
        - copy
        - fetch
        - yum (for centos)
        - apt (for Ubuntu)
        - package (common)
        - service
        - systemd_service
        - unarchive
        - user
        - line_in
    - conditions:
        - when
    - loops
    - playbook executions:
        - fork (-f using command prompt)
        - serial:
            - numbers
            - percenage
        - throttle
        - order
        - run once
    - vault
    - roles
    - handlers
    - tags (-t using command prompt)
    - error handling:
        - ignore_errors
        - block and rescue
    - start/step
    - dry run

- docker:
    - docker images
    - Dockerfile:
        - FROM #this hould be the first command in every Dockerfile, this instruction represents the container image.
        - RUN #RUN instruction is used to run commands at image building time
        - CMD #CMD instruction is used to run commands at container creation time and it is the default command in Dockerfile, CMD instruction can be overridden.
        - LABELS #LABELS can be used as metadata in Dockerfile, these just like tags, and it can be used to filter Docker images using the command "docker images --filter LABELS=NAME=NAGESWAR"
        - COPY #COPY instruction is used to copy files local to Docker container.
        - ADD #ADD instruction is advanced from COPY, ADD can be used to copy filed from remote source to Docker file, meand we can use URL's or tar files as source
        - ENTRYPOINT #ENTRYPOINT instruction is the executable and unlike CMD it can't override, CMD instruction can pass as arguments to ENTRYPOINT.
        - USER #USER instruction is used to run next instruction commands should run as this user.
        - WORKDIR #working directory
        - ARG
        - ONBUILD
        - ENV #to set environment variables
        - EXPOSE #EXPOSE instruction is used to define on which port this container is exposing
        - VOLUME #

- jenkins:
    - free style project:
        - for creating project we will use GUI to add different stages and steps
        - used for less complex and small projects
        - no source control
    - pipeline:
        - writing declerative groovy script for creating project
        - source code management
    - post build:
        - always  #this will run always
        - failure  #only runs when a pipeline fails
        - success  #runs only when the pipeline success
    - Directives:
        - environment:
            - we can use environment function inside pipeline to crate environment variables and use in our pipeline later
        - options:
            - timeout #we can restrict our pipeline that should not run more than defined time timeout(time: 1, unit: 'HOURS')
            - disableConcurrentBuilds #if we give this option it won't allow multiple builds at a time
        - parameters: #By using parameters we can control our pipeline, after builing pipeline we will get one option called Build with parameters
        - input: #while building pipeline it will ask us for permission
        - when: #by using when condition we can control stages in pipeline
